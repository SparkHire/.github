name: Bump Version on Push

on:
  workflow_call:
    inputs:
      commit_hash:
        required: false
        type: string
      canary:
        description: Set to true to perform canary build
        required: false
        type: boolean
        default: false
      build:
        description: Set to true to force a rebuild
        required: false
        type: boolean
        default: false

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - name: Generate a token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.GH_APP_ID }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - name: Get info
        id: get-commit-hash
        run: |
          COMMIT_INPUT="${{ inputs.commit_hash }}"
          GITHUB_SHA="${{ github.sha }}"

          echo "Workspace dir: ${{ github.workspace }}"
          echo "User: $(id -u -n) $(id -u):$(id -g)"

          if [[ -z "$COMMIT_INPUT" ]]; then
              HASH=$(echo "$GITHUB_SHA" | cut -c 1-7)
              echo "Commit input is empty. Using current SHA: $HASH"
          else
              HASH="$COMMIT_INPUT"
              echo "Commit input provided. Using: $HASH"
          fi

          echo "commit_hash=$HASH" >> "$GITHUB_OUTPUT"

      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.generate-token.outputs.token }}

      - name: Set Git user
        run: |
          git config user.name "SparkHireBot"
          git config user.email "dev@sparkhire.com"

      - name: Setup Node 20.x
        uses: actions/setup-node@v4
        with:
          registry-url: https://registry.npmjs.org
          node-version: 20.x

      - name: Npm cache
        id: cache-npm
        uses: actions/cache@v4
        with:
          path: ./node_modules
          key: ${{ runner.os }}-build-cache-node-modules-${{ hashFiles('**/package-lock.json') }}
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN_PUBLISH }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN_PUBLISH }}
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: Install npm dependencies
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}
        run: npm ci

      - name: Get merged branch name
        id: get-head-branch-name
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "Merged branch name: ${{ github.event.pull_request.head.ref }}"
            branch_name="${{ github.event.pull_request.head.ref }}"
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            echo "Merged branch name: ${{ github.ref }}"
            branch_name="${{ github.ref }}"
          fi

          branch_name_sanitized="${branch_name//\//-}"
          echo "branch_name=${branch_name}" >> $GITHUB_OUTPUT
          echo "branch_name_sanatized=${branch_name_sanitized}" >> $GITHUB_OUTPUT

      - name: Fail if branch_name not set
        if: ${{ steps.get-head-branch-name.outputs.branch_name == '' }}
        run: |
          echo "Branch name was not set" >&2
          exit 1

      - name: Get package version
        id: package-version
        run: |
          PACKAGE_VERSION=$(npm pkg get version)
          TRIMMED_PACKAGE_VERSION=$(echo "$PACKAGE_VERSION" | sed 's/"//g')
          echo "package_version=$TRIMMED_PACKAGE_VERSION" >> $GITHUB_OUTPUT

      - name: Fail if package_version not set
        if: ${{ steps.package-version.outputs.package_version == '' }}
        run: |
          echo "Current version was not set!" >&2
          exit 1

      - name: Get package name
        id: package-name
        run: |
          PACKAGE_NAME=$(npm pkg get name)
          TRIMMED_PACKAGE_NAME=$(echo "$PACKAGE_NAME" | sed 's/"//g')
          echo "package_name=$TRIMMED_PACKAGE_NAME" >> $GITHUB_OUTPUT

      - name: Determine version bump
        id: determine-version-bump
        run: |
          echo "Current version: ${{ steps.package-version.outputs.package_version }}"
          echo "Branch name: ${{ steps.get-head-branch-name.outputs.branch_name }}"

          BRANCH_NAME="${{ steps.get-head-branch-name.outputs.branch_name }}"
          CURRENT_VERSION="${{ steps.package-version.outputs.package_version }}"

          if [[ "$BRANCH_NAME" == *"release/"* ]]; then
            echo "This is a release branch. Setting version bump to 'major'."
            VERSION_BUMP="major"
          elif [[ "$BRANCH_NAME" == *"major/"* ]]; then
            echo "This is a major branch. Setting version bump to 'major'."
            VERSION_BUMP="major"
          elif [[ "$BRANCH_NAME" == *"minor/"* ]]; then
            echo "This is a minor branch. Setting version bump to 'minor'."
            VERSION_BUMP="minor"
          elif [[ "$BRANCH_NAME" == *"patch/"* ]]; then
            echo "This is a patch branch. Setting version bump to 'patch'."
            VERSION_BUMP="patch"
          elif [[ "$BRANCH_NAME" == *"hotfix/"* ]]; then
            echo "This is a hotfix branch. Setting version bump to 'patch'."
            VERSION_BUMP="patch"
          elif [[ "$BRANCH_NAME" == *"feature/"* ]]; then
            echo "This is a feature branch. Setting version bump to 'minor'."
            VERSION_BUMP="minor"
          elif [[ "$BRANCH_NAME" == *"bugfix/"* ]]; then
            echo "This is a bugfix branch. Setting version bump to 'patch'."
            VERSION_BUMP="patch"
          elif [[ "$BRANCH_NAME" == *"chore/"* ]]; then
            echo "This is a chore branch. Setting version bump to 'patch'."
            VERSION_BUMP="patch"
          elif [[ "$BRANCH_NAME" == *"docs/"* ]]; then
            echo "This is a docs branch. Setting version bump to 'patch'."
            VERSION_BUMP="patch"
          elif [[ "$BRANCH_NAME" == *"test/"* ]]; then
            echo "This is a test branch. Setting version bump to 'patch'."
            VERSION_BUMP="patch"
          else
            echo "Branch name does not match any known patterns. Defaulting version bump to 'patch'."
            VERSION_BUMP="patch"
          fi

          echo "Determined version bump: $VERSION_BUMP"

          echo "version_bump=$VERSION_BUMP" >> $GITHUB_OUTPUT

      - name: Download build
        uses: actions/download-artifact@v4
        with:
          name: build-${{ steps.get-commit-hash.outputs.commit_hash }}
          path: ./

      - name: Bump version
        id: bump-version
        run: |
          PUBLISHED_VERSION=$(npm version ${{ inputs.canary && 'pre' || '' }}${{ steps.determine-version-bump.outputs.version_bump }} ${{ inputs.canary && '--preid=canary-' || '' }}${{ steps.get-head-branch-name.outputs.branch_name_sanatized }}-${{ inputs.canary && steps.get-commit-hash.outputs.commit_hash || '' }} -m "Bump version to %s [skip ci]")
          echo $PUBLISHED_VERSION
          echo "published_version=$PUBLISHED_VERSION" >> $GITHUB_OUTPUT

      - name: Generate install cmd
        id: generate-install-cmd
        run: |
          INSTALL_CMD="npm install ${{ steps.package-name.outputs.package_name}}@${{ steps.bump-version.outputs.published_version }}"
          echo $INSTALL_CMD
          echo "install_cmd=$INSTALL_CMD" >> $GITHUB_OUTPUT

      - name: Publish package
        id: publish-package
        run: |
          npm publish ${{ inputs.build && '' || '--ignore-scripts' }} --tag ${{ inputs.canary && 'canary' || 'latest' }}
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN_PUBLISH }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN_PUBLISH }}

      - name: Push changes
        if: ${{ inputs.canary == false }}
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ steps.generate-token.outputs.token }}
          branch: ${{ github.ref }}

      - name: Update PR Description
        if: github.event_name == 'pull_request'
        uses: nefrob/pr-description@v1.2.0
        with:
          content: "\n\n<!-- published package install -->\n**Install package cmd**\n```\n${{ steps.generate-install-cmd.outputs.install_cmd }}\n```\n<!-- end published package install -->"
          regex: "\n\n<!-- published package install -->.*?<!-- end published package install -->"
          regexFlags: ims
          token: ${{ secrets.GITHUB_TOKEN }}
